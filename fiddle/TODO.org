* REPL
  1. 
* TODO Nominalization
  1. [X] Split case-lambda into 2 forms: copat-arg and copat-bind
     (maybe someday copa-bind will be gone too)
     + [X] make new case-lambda macro
  2. [X] Add nominal methods
     + [X] As a first class datatype that can be generated with an arity
       - implementation: a method is a name (and an arity?)
     + [X] Add a copat-method form that has the method as an arg
     + [X] Add an invoke method form? function?
  3. [-] In user-space. Make new macros to accommodate the changes
     - [X] basic matching of method args and listof method args
     - [ ] upto-method matching
* TODO Applications
  - [ ] Classes & GUI stuff
    - [ ] racket/draw: figure out how to nicely wrap class stuff to
      CBN stuff.
      + answer: dynamic-send(!)
    - [ ] GUI: build on racket/draw to make a full blown GUI system
      + application: adapt the Advent of Code 2019 solution to use a GUI
      + application: develop an xmonad-like "window manager" within the
        GUI system.
  - [ ] Interpreters using the relative monad approach. Try out some
    register stuff
  - [ ] Shell Scripting
    + [ ] make a command line arg parser 
* DONE Overall
  1. [X] Make a #lang
     1. [X] define works
     2. [X] require across fiddle modules
     3. [X] require/provide with Racket, wrapped
     4. [X] macros work
  2. [X] New name
  3. [X] Implement dot args, apply, general case-lambda as macros in
     SBPV
  4. [X] Implement some codata: streams, Haskell lists, parser
     combinator library
* TODO (Co)Pattern Matching
  - [X] Add literal matching
  - [X] Add capture up to a literal
  - [-] Pattern Matching
    - [X] cons matching
    - [ ] List matching
  - [ ] struct or Data/Codata forms ala Pyret/PLAI
  - [ ] predicate matching
* DONE Macros
  - [X] cond
* DONE Utility Functions
  - [X] CBV currying composition
* DONE KW Args
* TODO Nominal Data/CoData
** Nominal Data Types  

   For minimalism purposes, the best primitive for a new vtype to add
   are
   
   `new-vtype : UF(U(? -> F ?) x U(∀ Y. U(? -> Y) -> UY -> ? -> Y))`
   
   which returns a pair of
   1. An injection function that takes a value and wraps it in the
      constructor of this type
   2. A pattern-matching function that takes a continuation for the
      unwrapped value and an else case and an arg to pattern match on
      for the newly generated type.

   Similarly, a minimalist primitive for a new ctype is to add

   `new-ctype : UF(U(U¿ -> ¿) x U(U¿ -> U¿ -> ¿))`

   which returns a pair of
   1. A projection function that takes a thunk and calls it with the
      new method of this type
   2. A copattern-matching function that takes a continuation for if
      the method for this type is at the top of the stack, and another
      continuation for if the method does not match.

   A more user-friendly version might include an *arity* for the
   constructor/destructor in each case. The above examples are arity
   1, and are enough to implement the rest in the presence of x and
   ->. using dependency:

   new-vtype* : U((n : Nat) -> F(U(? ->^n F ?) x ∀ Y. U(? ->^n Y) -> UY -> ? -> Y))

   new-ctype* : U((n : Nat)-> F(U(U¿ -> ? ->^n ¿) x U(U(? ->^n ¿) -> U¿ -> ¿)))
** Example Uses of Nominal Codata

   One example I've encountered while programming in fiddle that would
   be a good use case for nominal codata is in *user-defined effects*.

   As an example, let's say we're using a user-defined non-determinism
   effect.

   We can do this with CPS'd a free "monad":

   NonDet v =~ forall Y. U(v -> Y) -> UY -> U(U(NonDet v) -> U(NonDet v) -> Y) -> Y

   I've encountered two problems with the "forgetful" embedding of
   this type into the dynamic setting.

   1. When dealing with variable arity functions, v1 -> ... -> NonDet
      v I need to be careful to not accidentally grab the
      kontinuations off of the stack when argument parsing.
   2. From a modularity perspective you might also accidentally
      inspect the stack after the kontinuations, essentially
      accidentally stomping on the handler's kontinuation.

   3. From a reasoning perspective, we may also want to limit what
      that Y is, to ensure that all handlers for NonDet are "nice"
      I.e., support things like associativity of choice

   codata NonDet v where
     .nondeterministically [Y] (return : U(v -> Y)) (fail : UY) (choose : U(U(NonDet v)-> U(NonDet v) -> Y)) : Y
