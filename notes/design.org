* Implicit shifting

Coding with explicit shifts between computation and value is a bit
tiresome and can be made lighter-weight (though possibly confusing) by
having some of them be implicit.
For now I'll keep everything implicit, but here I'll weigh the
options.

Right now everything is unambiguous, but consider the following
situations where a programmer might be frustrated by this unambiguity:
1. (UI) I want to pass a thunk to a function, so (M N). We can tell
   syntactically that N is a computation (because kind is
   inferrable/unambiguous), but we get an error: the problem is that
   arguments must be values, and I have to write `(M {N})` or
   `(M (thunk N))`
2. (FE) I want to run a computation and pass its result as an argument
   to a function, so (M N) again. I want this to desugar to
   `(bind (x N) (M x))1.

We get a dual problem when we are supposed to make a computation
1. (FI) In the body of a bind, I just want to return the value so I
   write (bind (x M) V), I want it to implicitly be
   `(bind (x M) (ret V))`
2. (UE) I know a variable is a thunk, and I want to call it with some
   arguments, so I write (Vf Va ...), which I expect to desugar to
   `((! Vf) Va ...)`.

For each of these two problems we can (1) make the programmer resolve
the ambiguity or (2) make one of the two options implicit, leaving
only the other explicit. This gives us 3^2=9 language designs.

1. Both explicit: cbpv
2. UI and UE implicit, FI and FE explicit: something that feels like
   CBName
3. FI and FE implicit: something that feels like CBV, maybe the same
   as untyped EEC? Downside is FE implicit means we have to pick an
   evaluation order
4. UI implicit, FI implicit: breaks substitutivity:
   (let [x M] x) where M is a computation is different from M
5. UE implicit, FE implicit: breaks substitutivity?
6. UI implicit, UE, FI, FE explicit ???
7. FE implicit, UI, UE, FI explicit ???
8. UE implicit, UI, FI, FE explicit ???
9. FI implicit, UI, UE, FE explicit ???


* Structural vs Open Nominal vs Closed Nominal
** Structural Fiddle
   Structural data and codata are what we get for free with Fiddle's
   dynamic typing. We can implement data using atomic data types,
   procs and cons cells. We can implement codata using atomic data
   types, konts and arguments.

   The downside of this approach is a lack of isolation. Parties must
   always agree on fixed "protocols" or they might step on each others
   toes.

** (Open) Nominal Fiddle
   Open Nominal Fiddle is based around the concepts of first class
   "Cases" and "Methods"
  
*** Implementation
   Both cases and methods will be implemented using Racket structs.

   - A case is a struct, and a member of the case is a
     value constructed using the struct's constructor. Pattern matching
     on the case is implemented using the struct's predicate and
     projection functions.

   - A method is also a struct, and a stack with the method on top is
     an instance of the struct. A neat thing that happens is the
     implementation struct always has an extra argument: the tail of
     the stack!

*** Interface/Syntax

    To implement cases/methods, we need (1) syntax for creating new
    cases and methods (2) syntax for constructing a case/invoking a
    method and (3) syntax for matching against a case/method.

**** New Case/New Method

     (def-case name n) the name of the case and the arity

     (def-method name n) the name of the method and the arity

     Note that a method is always "appending" to the stack, so the
     arity is in some since a minimum of how many arguments are pushed
     onto the stack after the method. There may be more after, but
     they are not considered "part" of the method.

**** Constructing/Invoking

     PROBLEM

     (@ name x1 ...) If name is a case, this will construct an element
     of that case. We would like for this to be a value, but if so
     there can't be any arity checking...

     2 options for methods.
     1. Grouped methods
        `(t %(name x1 ...))`
     2. Ungrouped methods
	`(t % name x1 ...)`
 
     Tradeoff: in a grouped method, it is clear which arguments are
     meant to be part of the method, whereas in ungrouped the cuttof
     is indeterminate because the syntax is ambiguous: does t v mean v
     is pushed as an argument or it is pushed onto the "currently
     invoked method"

     Is there an analogous situation for cases? Sort of. We also want
     easy access to procedural versions of constructors so that they
     can be passed around. I.e. the difference between the value (cons
     x y) and the computation (! Cons) against the stack x y k. We can
     think of the grouped method as analogous to the value, where the
     number of arguments is statically known
     

**** Pattern Matching/Copattern Matching

** (Closed) Nominal Fiddle
   Closed Nominal is based around the concepts of data types and
   codata types. A data type fixes a group of cases for the purposes
   of enabling exhaustiveness checking in pattern matches. A codata
   type fixes a group of cases for enabling exhaustiveness checking of
   copattern matches.
   

  
